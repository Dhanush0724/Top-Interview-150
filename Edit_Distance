class Solution(object):
    def minDistance(self, word1, word2):
        """
        :type word1: str
        :type word2: str
        :rtype: int
        """
        # def f(i,j,dp):
        #     if i < 0 :
        #         return j+1
        #     if j < 0:
        #         return i+1
        #     if dp[i][j] != -1:
        #         return dp[i][j]
        #     if word1[i] == word2[j]:
        #         dp[i][j] =  0 + f(i-1,j-1,dp)
        #     else :
        #         insert = 1 + f(i,j-1,dp)
        #         delete = 1 + f(i-1,j,dp)
        #         replace = 1 + f(i-1,j-1,dp)
        #         dp[i][j] =  min(insert,delete,replace)
        #     return dp[i][j]
        # dp = [[-1 for _ in range(len(word2))] for _ in range(len(word1))]
        # return f(len(word1)-1,len(word2)-1,dp)

        n = len(word1)+1
        m = len(word2)+1

        dp = [[0 for _ in range(m)] for _ in range(n)]

        for i in range(n):
            dp[i][0] = i
        for j in range(m):
            dp[0][j] = j
        
        for i in range(1,n):
            for j in range(1,m):
                if word1[i-1] == word2[j-1]:
                    dp[i][j] = dp[i-1][j-1]
                else :
                    dp[i][j] = 1 + min(dp[i][j-1],dp[i-1][j],dp[i-1][j-1])
        return dp[n-1][m-1]
        
