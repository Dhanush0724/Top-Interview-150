class Solution(object):
    def threeSum(self, nums):
        nums.sort()
        n = len(nums)
        res = []
        for i in range(n):
            if i>0 and nums[i] == nums[i-1]:
                continue
            j = i+1
            k = n-1
            while j < k:
                temp = nums[i] + nums[j] + nums[k]

                if temp > 0:
                    k-=1
                elif temp < 0:
                    j+=1
                else :
                    res.append([nums[i],nums[j],nums[k]])
                    j+=1
                    k-=1
                    while j < k and nums[j] == nums[j-1] : j+=1
                    while j < k and nums[k] == nums[k+1] : k-=1
        return res

        # n = len(nums)
        # res = []
        # seen = set()
        # for i in range(n):
        #     for j in range(i+1,n):
        #         for k in range(j+1,n):
        #             if nums[i] + nums[j] + nums[k] == 0:
        #                 triplet =  tuple(sorted([nums[i],nums[j],nums[k]]))
        #                 if triplet not in seen:
        #                     seen.add(triplet)
                        
        #                     res.append(list(triplet))
        # return res
            # # res = set()
            # n = len(nums)
            # for i in range(n):
            #     hashset = set()
            #     for j in range(i+1,n):
            #         third = -(nums[i]+nums[j])

            #         if third in hashset:
            #             temp = [nums[i],nums[j],third]
            #             temp.sort()
            #             res.add(tuple(temp))
            #         hashset.add(nums[j])
            # return [list(i) for i in res]




