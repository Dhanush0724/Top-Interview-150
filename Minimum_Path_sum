class Solution(object):
    def minPathSum(self, grid):
        """
        :type grid: List[List[int]]
        :rtype: int
        """
        n = len(grid)
        m = len(grid[0])
        # def f(i,j,dp):
        #     if i == n-1 and j == m-1:
        #         return grid[i][j]
        #     if i >= n or j >= m:
        #         return float('inf')
        #     if dp[i][j] != -1:
        #         return dp[i][j]
        #     down =  f(i+1 , j , dp)
        #     right =  f(i,j+1,dp)
        #     dp[i][j] =  grid[i][j] + min(down,right)dp[i][j] =  grid[i][j] + min(down,right)
        #     return dp[i][j]
        # dp = [[-1 for _ in range(m)] for _ in range(n)]
        # return f(0,0,dp)

        dp = [[0]*m for _ in range(n)]
        dp[0][0] = grid[0][0]

        for j in range(1,m):
            dp[0][j] = grid[0][j] + dp[0][j-1]
        
        for i in range(1,n):
            dp[i][0] = grid[i][0] + dp[i-1][0]

        for i in range(1,n):
            for j in range(1,m):
                dp[i][j] = grid[i][j] + min(dp[i-1][j],dp[i][j-1])
        
        return dp[n-1][m-1]
