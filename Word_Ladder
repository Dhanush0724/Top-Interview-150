class Solution:
    def ladderLength(self, beginWord: str, endWord: str, wordList: List[str]) -> int:

        # seen = set(wordList)
        # queue = deque([(beginWord,1)])
        # while queue :
        #     word , count = queue.popleft()
        #     if word == endWord:
        #         return count
        #     for i in range(len(word)):
        #         char = word[i]
        #         for ch in range(ord('a'),ord('z')+1):
        #             replace_word = word[:i] + chr(ch) + word[i+1:]
        #             if replace_word in seen:
        #                 seen.remove(replace_word)
        #                 queue.append((replace_word,count+1))
        # return 0
        
        seen = set(wordList)
        if endWord not in seen:
            return 0
        queue = deque([(beginWord,1)])

        while queue:
            word,count = queue.popleft()
            if word == endWord:
                return count

            for i in range(len(word)):
                char = word[i]
                for ch in 'zxcvbnmlkjhgfdsaqwertyuiop':
                    if char == ch:
                        continue
                    replace_word = word[:i] + ch + word[i+1:]
                    
                    if replace_word in seen:
                        seen.remove(replace_word)
                        queue.append((replace_word,count+1))
        return 0
           
