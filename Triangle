class Solution(object):
    def minimumTotal(self, triangle):
        """
        :type triangle: List[List[int]]
        :rtype: int
        """
        # def f(i,j):
        #     if i == len(triangle)-1:
        #         return triangle[i][j]
            
        #     down = triangle[i][j] + f(i+1,j)
        #     diagonal = triangle[i][j] + f(i+1,j+1)

        #     return min(down,diagonal)

        # return f(0,0)
        
        # def f(i,j,dp):
        #     if i == len(triangle)-1:
        #         return triangle[i][j]
            
        #     if dp[i][j]!=-1:
        #         return dp[i][j]
            
        #     down = triangle[i][j] + f(i+1,j,dp)
        #     diagonal = triangle[i][j] + f(i+1,j+1,dp)
        #     dp[i][j] = min(down,diagonal)
        #     return dp[i][j]

        # n = len(triangle)
        
        # dp = [[-1 for _ in range(len(triangle[i]))] for i in range(n)]
        # return f(0,0,dp)
        # n = len(triangle)
        # dp = [[0 for j in range(n)]for i in range(n)]

        # for j in range(n):
        #     dp[n-1][j] = triangle[n-1][j]
        
        # for i in range(n-2,-1,-1):
        #     for j in range(i,-1,-1):
        #         down = triangle[i][j] + dp[i+1][j]
        #         diagonal = triangle[i][j] + dp[i+1][j+1]

        #         dp[i][j] = min(down,diagonal)
        # return dp[0][0]

        n = len(triangle)
        front = [0]*n
        
        for j in range(n):
            front[j] = triangle[n-1][j]
        
        for i in range(n-2,-1,-1):
            curr = [0]*n
            for j in range(i,-1,-1):
                down = triangle[i][j] + front[j]
                diagonal = triangle[i][j] + front[j+1]

                curr[j] = min(down,diagonal)
            front = curr
        return front[0]
