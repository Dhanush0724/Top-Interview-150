class Solution:
    def exist(self, board: List[List[str]], word: str) -> bool:


        n = len(board)
        m = len(board[0])
        word_len = len(word)

        def backtrack(i, j, ind):
            if ind == word_len:
                return True
            if i < 0 or i >= n or j < 0 or j >= m or board[i][j] != word[ind]:
                return False
            char = board[i][j]
            board[i][j] = "V"
            directions = [(1, 0), (0, 1), (0, -1), (-1, 0)]
            for a, b in directions:
                r, c = i + a, j + b
                if backtrack(r, c, ind + 1):
                    return True
            board[i][j] = char
            return False

        for i in range(n):
            for j in range(m):
                if board[i][j] == word[0]:
                    if backtrack(i, j, 0):
                        return True

        return False
        
        
