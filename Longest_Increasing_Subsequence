class Solution(object):
    def lengthOfLIS(self, nums):
        
        # def f(ind,prev):
        #     if ind == len(nums):
        #         return  0
        #     not_take = 0+f(ind+1,prev)
        #     take = 0
        #     if prev == -1 or nums[ind] > nums[prev]:
        #         take = 1+f(ind+1,ind)
        #     return max(not_take,take)
        # return f(0,-1)

        # def f(ind,prev,dp):
        #     if ind == len(nums):
        #         return 0
        #     if dp[ind][prev+1]!= -1:
        #         return dp[ind][prev+1]
        #     not_take = 0 + f(ind+1,prev,dp)
        #     take = 0
        #     if prev == -1 or nums[ind] > nums[prev]:
        #         take = 1 + f(ind+1,ind,dp)
        #     dp[ind][prev+1] = max(not_take,take)
        #     return dp[ind][prev+1]
        # n = len(nums)
        # dp = [[-1 for _ in range(n+1)] for _ in range(n)]
        # return f(0,-1,dp)


        n = len(nums)

        dp = [1]*n

        for i in range(1,n):
            for j in range(i):
                if nums[i] > nums[j]:
                    dp[i] = max(dp[i],dp[j]+1)
        return max(dp)


        
